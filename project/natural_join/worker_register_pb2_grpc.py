# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import worker_register_pb2 as worker__register__pb2


class MasterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addMapper = channel.unary_unary(
                '/worker_registration_system.MasterService/addMapper',
                request_serializer=worker__register__pb2.AddMapperRequest.SerializeToString,
                response_deserializer=worker__register__pb2.GeneralResponse.FromString,
                )
        self.addReducer = channel.unary_unary(
                '/worker_registration_system.MasterService/addReducer',
                request_serializer=worker__register__pb2.AddReducerRequest.SerializeToString,
                response_deserializer=worker__register__pb2.GeneralResponse.FromString,
                )


class MasterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addMapper(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addReducer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addMapper': grpc.unary_unary_rpc_method_handler(
                    servicer.addMapper,
                    request_deserializer=worker__register__pb2.AddMapperRequest.FromString,
                    response_serializer=worker__register__pb2.GeneralResponse.SerializeToString,
            ),
            'addReducer': grpc.unary_unary_rpc_method_handler(
                    servicer.addReducer,
                    request_deserializer=worker__register__pb2.AddReducerRequest.FromString,
                    response_serializer=worker__register__pb2.GeneralResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'worker_registration_system.MasterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addMapper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/worker_registration_system.MasterService/addMapper',
            worker__register__pb2.AddMapperRequest.SerializeToString,
            worker__register__pb2.GeneralResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addReducer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/worker_registration_system.MasterService/addReducer',
            worker__register__pb2.AddReducerRequest.SerializeToString,
            worker__register__pb2.GeneralResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MapperServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.startComputation = channel.unary_unary(
                '/worker_registration_system.MapperService/startComputation',
                request_serializer=worker__register__pb2.GeneralRequest.SerializeToString,
                response_deserializer=worker__register__pb2.GeneralMessageResponse.FromString,
                )


class MapperServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def startComputation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapperServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'startComputation': grpc.unary_unary_rpc_method_handler(
                    servicer.startComputation,
                    request_deserializer=worker__register__pb2.GeneralRequest.FromString,
                    response_serializer=worker__register__pb2.GeneralMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'worker_registration_system.MapperService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapperService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def startComputation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/worker_registration_system.MapperService/startComputation',
            worker__register__pb2.GeneralRequest.SerializeToString,
            worker__register__pb2.GeneralMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReducerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.startComputation = channel.unary_unary(
                '/worker_registration_system.ReducerService/startComputation',
                request_serializer=worker__register__pb2.GeneralRequest.SerializeToString,
                response_deserializer=worker__register__pb2.GeneralMessageResponse.FromString,
                )


class ReducerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def startComputation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReducerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'startComputation': grpc.unary_unary_rpc_method_handler(
                    servicer.startComputation,
                    request_deserializer=worker__register__pb2.GeneralRequest.FromString,
                    response_serializer=worker__register__pb2.GeneralMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'worker_registration_system.ReducerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReducerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def startComputation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/worker_registration_system.ReducerService/startComputation',
            worker__register__pb2.GeneralRequest.SerializeToString,
            worker__register__pb2.GeneralMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
