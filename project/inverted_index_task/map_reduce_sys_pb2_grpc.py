# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import map_reduce_sys_pb2 as map__reduce__sys__pb2


class MasterServiceStub(object):
    """------------------------------------------------- Master RPCs ------------------------------------------------------- //

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/map_reduce_sys.MasterService/Register',
                request_serializer=map__reduce__sys__pb2.RegisterRequest.SerializeToString,
                response_deserializer=map__reduce__sys__pb2.Response.FromString,
                )
        self.MapperDone = channel.unary_unary(
                '/map_reduce_sys.MasterService/MapperDone',
                request_serializer=map__reduce__sys__pb2.MapperDoneRequest.SerializeToString,
                response_deserializer=map__reduce__sys__pb2.Response.FromString,
                )
        self.ReducerDone = channel.unary_unary(
                '/map_reduce_sys.MasterService/ReducerDone',
                request_serializer=map__reduce__sys__pb2.ReducerDoneRequest.SerializeToString,
                response_deserializer=map__reduce__sys__pb2.Response.FromString,
                )


class MasterServiceServicer(object):
    """------------------------------------------------- Master RPCs ------------------------------------------------------- //

    """

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MapperDone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReducerDone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=map__reduce__sys__pb2.RegisterRequest.FromString,
                    response_serializer=map__reduce__sys__pb2.Response.SerializeToString,
            ),
            'MapperDone': grpc.unary_unary_rpc_method_handler(
                    servicer.MapperDone,
                    request_deserializer=map__reduce__sys__pb2.MapperDoneRequest.FromString,
                    response_serializer=map__reduce__sys__pb2.Response.SerializeToString,
            ),
            'ReducerDone': grpc.unary_unary_rpc_method_handler(
                    servicer.ReducerDone,
                    request_deserializer=map__reduce__sys__pb2.ReducerDoneRequest.FromString,
                    response_serializer=map__reduce__sys__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'map_reduce_sys.MasterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterService(object):
    """------------------------------------------------- Master RPCs ------------------------------------------------------- //

    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/map_reduce_sys.MasterService/Register',
            map__reduce__sys__pb2.RegisterRequest.SerializeToString,
            map__reduce__sys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MapperDone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/map_reduce_sys.MasterService/MapperDone',
            map__reduce__sys__pb2.MapperDoneRequest.SerializeToString,
            map__reduce__sys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReducerDone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/map_reduce_sys.MasterService/ReducerDone',
            map__reduce__sys__pb2.ReducerDoneRequest.SerializeToString,
            map__reduce__sys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MapperServiceStub(object):
    """------------------------------------------------- Mapper RPCs ------------------------------------------------------- //

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MapTaskAssignment = channel.unary_unary(
                '/map_reduce_sys.MapperService/MapTaskAssignment',
                request_serializer=map__reduce__sys__pb2.MapTaskAssignmentRequest.SerializeToString,
                response_deserializer=map__reduce__sys__pb2.Response.FromString,
                )


class MapperServiceServicer(object):
    """------------------------------------------------- Mapper RPCs ------------------------------------------------------- //

    """

    def MapTaskAssignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapperServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MapTaskAssignment': grpc.unary_unary_rpc_method_handler(
                    servicer.MapTaskAssignment,
                    request_deserializer=map__reduce__sys__pb2.MapTaskAssignmentRequest.FromString,
                    response_serializer=map__reduce__sys__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'map_reduce_sys.MapperService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapperService(object):
    """------------------------------------------------- Mapper RPCs ------------------------------------------------------- //

    """

    @staticmethod
    def MapTaskAssignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/map_reduce_sys.MapperService/MapTaskAssignment',
            map__reduce__sys__pb2.MapTaskAssignmentRequest.SerializeToString,
            map__reduce__sys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReducerServiceStub(object):
    """------------------------------------------------- Reducer RPCs ------------------------------------------------------- //

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReduceTaskAssignment = channel.unary_unary(
                '/map_reduce_sys.ReducerService/ReduceTaskAssignment',
                request_serializer=map__reduce__sys__pb2.ReduceTaskAssignmentRequest.SerializeToString,
                response_deserializer=map__reduce__sys__pb2.Response.FromString,
                )


class ReducerServiceServicer(object):
    """------------------------------------------------- Reducer RPCs ------------------------------------------------------- //

    """

    def ReduceTaskAssignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReducerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReduceTaskAssignment': grpc.unary_unary_rpc_method_handler(
                    servicer.ReduceTaskAssignment,
                    request_deserializer=map__reduce__sys__pb2.ReduceTaskAssignmentRequest.FromString,
                    response_serializer=map__reduce__sys__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'map_reduce_sys.ReducerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReducerService(object):
    """------------------------------------------------- Reducer RPCs ------------------------------------------------------- //

    """

    @staticmethod
    def ReduceTaskAssignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/map_reduce_sys.ReducerService/ReduceTaskAssignment',
            map__reduce__sys__pb2.ReduceTaskAssignmentRequest.SerializeToString,
            map__reduce__sys__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
